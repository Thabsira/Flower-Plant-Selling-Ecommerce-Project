




<%- include("../../views/partials/admin/header") %>
<div class="chart-container" style="width: 80%; max-width: 900px; margin:20px; text-align: center;position: sticky;">
  <h3>Sales Overview</h3>
  <select id="reportTypeFilter" style="margin-bottom: 20px; padding: 5px;">
    <option value="yearly">Yearly</option>
    <option value="monthly">Monthly</option>
    <option value="weekly">Weekly</option> 
  </select>
  <canvas id="salesBarChart" style="max-height: 400px;"></canvas>

 <!---- <div class="chart-container" style="width: 80%; max-width: 900px; margin: 100px; text-align: center;">
    <h3>Top 10 Best Selling Products</h3>
    <canvas id="topSellingBarChart" style="max-height: 400px;"></canvas>
  </div>--->



<!---<div class="chart-container" style="width: 80%; max-width: 900px; margin: 20px; text-align: center;">
  <h3>Top 10 Best Selling Products</h3>
  <canvas id="topSellingPieChart" style="max-height: 400px;"></canvas>
</div>--->


<div class="chart-container" style="width: 90%; max-width: 1200px; height: 200px; margin: 20px; text-align: center;">
  <h3>Top 10 Best Selling Products</h3>
  <canvas id="topSellingPieChart" style="height: 100%;"></canvas>
</div>


<div class="chart-container" style="width: 90%; max-width: 1200px; height: 200px; margin-top: 50px; text-align: center;">
  <h3>Top 10 Categories</h3>
  <canvas id="topCategoriesPieChart" style="height: 100%;"></canvas>
</div>



  
</div>



<%- include("../../views/partials/admin/footer") %>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const ctx = document.getElementById("salesBarChart").getContext("2d");
    const reportTypeFilter = document.getElementById("reportTypeFilter");

    let salesChart;

    // Function to calculate the max value rounded up to the nearest 10,000
    const calculateYAxisMax = (data) => {
      const maxValue = Math.max(...data); // Get the maximum value from the dataset
      return Math.ceil(maxValue / 10000) * 10000 || 10000; // Round up to the nearest 10,000; fallback to 10,000 if max is 0
    };

    const fetchSalesData = async (reportType) => {
      try {
        const response = await fetch(`/admin/dashboard/sales-data?reportType=${reportType}`);
        const data = await response.json();

        const labels = data.map((item) => {
          if (reportType === "weekly") {
            return `Week ${item._id}`; // Weekly labels
          }
          return `Month ${item._id}`; // Monthly/Yearly labels
        });
        const totalSales = data.map((item) => item.totalSales);
        const netSales = data.map((item) => item.netSales);

        const maxSales = calculateYAxisMax([...totalSales, ...netSales]); // Calculate Y-axis max

        if (salesChart) {
          // Update chart data
          salesChart.data.labels = labels;
          salesChart.data.datasets[0].data = totalSales;
          salesChart.data.datasets[1].data = netSales;

          // Update chart options
          salesChart.options.scales.y.min = 0; // Start Y-axis from 0
          salesChart.options.scales.y.max = maxSales; // Set fixed max
          salesChart.options.scales.y.ticks.stepSize = 10000; // Fixed step size of 10,000
          salesChart.update();
        } else {
          // Create a new chart
          salesChart = new Chart(ctx, {
            type: "bar",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Total Sales (₹)",
                  data: totalSales,
                  backgroundColor: "rgba(75, 192, 192, 0.6)",
                  borderColor: "rgba(75, 192, 192, 1)",
                  borderWidth: 1,
                },
                {
                  label: "Net Sales (₹)",
                  data: netSales,
                  backgroundColor: "rgba(255, 99, 132, 0.6)",
                  borderColor: "rgba(255, 99, 132, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  min: 0, // Start Y-axis at 0
                  max: maxSales, // Dynamically calculate max
                  ticks: {
                    stepSize: 10000, // Fixed step size of 10,000
                    callback: function (value) {
                      return value.toLocaleString("en-IN"); // Format numbers with commas
                    },
                  },
                },
              },
            },
          });
        }
      } catch (error) {
        console.error("Error fetching sales data:", error);
      }
    };

    // Initialize chart with yearly data
    fetchSalesData("yearly");

    // Add event listener for filter changes
    reportTypeFilter.addEventListener("change", (e) => {
      fetchSalesData(e.target.value);
    });
  });





  /*document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("topSellingBarChart").getContext("2d");
    
    const response = await fetch('/admin/dashboard/top-selling-products');
    const data = await response.json();

    const labels = data.map(item => item.productName);
    const salesData = data.map(item => item.totalQuantitySold);

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Quantity Sold',
          data: salesData,
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1,
            },
          },
        },
      },
    });
  });*/


 /* document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("topSellingBarChart").getContext("2d");
    
    const response = await fetch('/admin/dashboard/top-selling-products');
    const data = await response.json();

    const labels = data.map(item => item.productName);
    const salesData = data.map(item => item.totalQuantitySold);

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Quantity Sold',
          data: salesData,
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 10,  // Set the tick step size to 10 (or any other value)
              min: 0,  // Ensures that the Y-axis starts from 0
            },
          },
        },
        plugins: {
          legend: {
            position: 'top',
          },
        },
      },
    });
  });*/



  document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("topSellingPieChart").getContext("2d");
    
    const response = await fetch('/admin/dashboard/top-selling-products');
    const data = await response.json();

    const labels = data.map(item => item.productName);  // Product names
    const salesData = data.map(item => item.totalQuantitySold);  // Sales data

    new Chart(ctx, {
      type: 'pie',  // Changed from 'bar' to 'pie'
      data: {
        labels: labels,
        datasets: [{
          data: salesData,
          backgroundColor: [
            'rgba(75, 192, 192, 0.6)',  // Light blue
            'rgba(255, 99, 132, 0.6)',  // Light red
            'rgba(255, 159, 64, 0.6)',  // Light orange
            'rgba(153, 102, 255, 0.6)', // Light purple
            'rgba(54, 162, 235, 0.6)',  // Light blue
            'rgba(255, 206, 86, 0.6)',  // Light yellow
            'rgba(75, 192, 192, 0.6)',  // Light green
            'rgba(255, 99, 132, 0.6)',  // Light red
            'rgba(153, 102, 255, 0.6)', // Light purple
            'rgba(54, 162, 235, 0.6)',  // Light blue
          ],
          borderColor: [
            'rgba(75, 192, 192, 1)',  
            'rgba(255, 99, 132, 1)',  
            'rgba(255, 159, 64, 1)',  
            'rgba(153, 102, 255, 1)', 
            'rgba(54, 162, 235, 1)',  
            'rgba(255, 206, 86, 1)',  
            'rgba(75, 192, 192, 1)',  
            'rgba(255, 99, 132, 1)',  
            'rgba(153, 102, 255, 1)', 
            'rgba(54, 162, 235, 1)',  
          ],
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            callbacks: {
              label: function(tooltipItem) {
                // Format the tooltip to display product names and sales quantity
                return `${tooltipItem.label}: ${tooltipItem.raw} units sold`;
              }
            }
          }
        }
      },
    });
  });


 /* fetch('/admin/dashboard/top-categories')
      .then(response => response.json())
      .then(data => {
        const categoriesListDiv = document.getElementById('topCategoriesList');
        
        // Loop through each category and create a card
        data.categories.forEach(category => {
          const categoryDiv = document.createElement('div');
          categoryDiv.classList.add('col-md-4', 'mb-4');
          
          categoryDiv.innerHTML = `
            <div class="card">
              <div class="card-body">
                <h5 class="card-title">${category.name}</h5>
                <p class="card-text">Total Sold: ${category.totalQuantity}</p>
              </div>
            </div>
          `;
          categoriesListDiv.appendChild(categoryDiv);
        });
      })
      .catch(error => {
        console.error('Error fetching top categories:', error);
      });*/



      document.addEventListener("DOMContentLoaded", async () => {
    const ctx = document.getElementById("topCategoriesPieChart").getContext("2d");
    
    // Fetch the data from your backend API endpoint
    const response = await fetch('/admin/dashboard/top-selling-categories');
    const data = await response.json();

    const labels = data.map(item => item.categoryName);  // Category names
    const salesData = data.map(item => item.totalSales);  // Sales data

    // Create the pie chart using Chart.js
    new Chart(ctx, {
      type: 'pie',  // Pie chart
      data: {
        labels: labels,
        datasets: [{
          data: salesData,
          backgroundColor: [
            'rgba(75, 192, 192, 0.6)',  // Light blue
            'rgba(255, 99, 132, 0.6)',  // Light red
            'rgba(255, 159, 64, 0.6)',  // Light orange
            'rgba(153, 102, 255, 0.6)', // Light purple
            'rgba(54, 162, 235, 0.6)',  // Light blue
            'rgba(255, 206, 86, 0.6)',  // Light yellow
            'rgba(75, 192, 192, 0.6)',  // Light green
            'rgba(255, 99, 132, 0.6)',  // Light red
            'rgba(153, 102, 255, 0.6)', // Light purple
            'rgba(54, 162, 235, 0.6)',  // Light blue
          ],
          borderColor: [
            'rgba(75, 192, 192, 1)',  
            'rgba(255, 99, 132, 1)',  
            'rgba(255, 159, 64, 1)',  
            'rgba(153, 102, 255, 1)', 
            'rgba(54, 162, 235, 1)',  
            'rgba(255, 206, 86, 1)',  
            'rgba(75, 192, 192, 1)',  
            'rgba(255, 99, 132, 1)',  
            'rgba(153, 102, 255, 1)', 
            'rgba(54, 162, 235, 1)',  
          ],
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            callbacks: {
              label: function(tooltipItem) {
                // Format the tooltip to display category names and sales quantity
                return `${tooltipItem.label}: ${tooltipItem.raw} units sold`;
              }
            }
          }
        }
      },
    });
  });



     



  

</script>


















































