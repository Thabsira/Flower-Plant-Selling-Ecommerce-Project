<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<%- include("../../views/partials/admin/header") %>

<div class="container mt-4">
    <h2 class="mb-4">Manage Orders</h2>
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Order ID</th>
                <th>Total Price</th>
                <th>Status</th>
                <th>Actions</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            <% orders.forEach(order => { %>
                <tr>
                    <td><%= order.orderId %></td>
                    <td><%= order.finalAmount.toFixed(2) %> USD</td> <!-- Format price -->
                    <td>
        
<select id="orderStatus-<%= order._id %>" onchange="updateOrderStatus('<%= order._id %>', this.value)"
    <% if(order.status === 'Delivered') { %> disabled <% } %> >
    <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %> >Pending</option>
    <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %> >Processing</option>
    <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %> >Shipped</option>
    <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %> >Delivered</option>
    <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %> >Cancelled</option>
  </select>
  
                    </td>
                    <td>
                        <button class="btn btn-danger" onclick="cancelOrder('<%= order._id %>')">Cancel</button>
                    </td>
                    <td><%= order.createdOn %></td>
                  
                
                   

                     <!------ <td>
                        <% if (order.address && order.address.address && order.address.address.length) { %>
                          <% order.address.address.forEach(addr => { %>
                            <p>Type: <%= addr.addressType %></p>
                            <p>Name: <%= addr.name %></p>
                            <p>City: <%= addr.city %></p>
                            <p>State: <%= addr.state %></p>
                            <p>Pincode: <%= addr.pincode %></p>
                            <p>Phone: <%= addr.phone %></p>
                          <% }) %>
                        <% } else { %>
                          <p>No address available</p>
                        <% } %>
                      </td>--->
            
                </tr>
            <% }) %>
        </tbody>
        
    </table>
    <!---<div class="pagination">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
        <% } %>
      
        <span>Page <%= currentPage %> of <%= totalPages %></span>
      
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
        <% } %>
      </div>-->

     
      <div class="pagination" style="display: flex; justify-content: center; align-items: center; margin-top: 20px;">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>" style="padding: 8px 15px; margin: 0 5px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px;">Previous</a>
        <% } %>
      
        <span style="padding: 8px 15px; margin: 0 5px; font-size: 16px; font-weight: bold;">Page <%= currentPage %> of <%= totalPages %></span>
      
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>" style="padding: 8px 15px; margin: 0 5px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px;">Next</a>
        <% } %>
      </div>  
      

</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script>
/*async function updateOrderStatus(orderId, status) {

    const orderRow = document.querySelector(`select[onchange="updateOrderStatus('${orderId}', this.value)"]`);
    if (orderRow && orderRow.value === 'Delivered') {
        Swal.fire({
            icon: 'info',
            title: 'Info',
            text: 'Order status cannot be changed after delivery.',
            timer: 2000,
        });
        return;
    }

    const response = await fetch(`/admin/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
    });

    if (response.ok) {
        //alert('Order status updated successfully.');
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Order status updated successfully.',
            timer:2000,
            willClose:()=>{
              location.reload();
            }
        });
         
    } else {
        //alert('Error updating order status.');
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error updating order status.',
            timer:2000,
        });
    }
}*/


/*async function updateOrderStatus(orderId, status) {
    const orderRow = document.querySelector(`select[onchange="updateOrderStatus('${orderId}', this.value)"]`);
    if (order.status === 'Delivered') {
  document.getElementById("orderStatus").disabled = true;
}
   if (orderRow && orderRow.value === 'Delivered') {
        Swal.fire({
            icon: 'info',
            title: 'Info',
            text: 'Order status cannot be changed after delivery.',
            timer: 2000,
        });
        return;
    }

    const response = await fetch(`/admin/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
    });

    if (response.ok) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Order status updated successfully.',
            timer: 2000,
            willClose: () => {
                location.reload();
            }
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error updating order status.',
            timer: 2000,
        });
    }
}*/


/*async function updateOrderStatus(orderId, status) {
    const orderRow = document.querySelector(`select[onchange="updateOrderStatus('${orderId}', this.value)"]`);

    // This should be called on page load


    // Check if the current status is "Delivered" before updating
    if (status === 'Delivered') {
        Swal.fire({
            icon: 'info',
            title: 'Info',
            text: 'Once the order is delivered, the status cannot be changed.',
            timer: 2000,
        });

        // Disable the dropdown immediately
        if (orderRow) orderRow.disabled = true;
    }

    const response = await fetch(`/admin/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
    });

    if (response.ok) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Order status updated successfully.',
            timer: 2000,
            willClose: () => {
                location.reload();
            }
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error updating order status.',
            timer: 2000,
        });
    }
}*/









/*async function deleteOrder(orderId) {
    if (confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
        const response = await fetch(`/admin/orders/${orderId}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            alert('Order deleted successfully.');
            location.reload(); // Reload the page to see changes
        } else {
            alert('Error deleting order.');
        }
    }
}*/



/*async function updateOrderStatus(orderId, status) {
    const orderRow = document.querySelector(`select[onchange="updateOrderStatus('${orderId}', this.value)"]`);
    
    // Check if trying to set to "Delivered" and prevent further changes
    if (status === 'Delivered') {
        Swal.fire({
            icon: 'info',
            title: 'Info',
            text: 'Once the order is delivered, the status cannot be changed.',
            timer: 2000,
        });

        // Disable the dropdown
        if (orderRow) orderRow.disabled = true;
    }

    // Make the request to update status on the server
    const response = await fetch(`/admin/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
    });

    if (response.ok) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Order status updated successfully.',
            timer: 2000,
            willClose: () => {
                // Refresh the page to fetch and display updated data
                location.reload();
            }
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error updating order status.',
            timer: 2000,
        });
    }
}*/

async function updateOrderStatus(orderId, status) {
    const orderRow = document.querySelector(`select[onchange="updateOrderStatus('${orderId}', this.value)"]`);
    
    // Check if trying to set to "Delivered" and prevent further changes
    if (status === 'Delivered') {
        Swal.fire({
            icon: 'info',
            title: 'Info',
            text: 'Once the order is delivered, the status cannot be changed.',
            timer: 2000,
        });

        // Disable the dropdown
        if (orderRow) orderRow.disabled = true;
    }

    // Make the request to update status on the server
    const response = await fetch(`/admin/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
    });

    if (response.ok) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Order status updated successfully.',
            timer: 2000,
            willClose: () => {
                // Refresh the page to fetch and display updated data
                location.reload();
            }
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error updating order status.',
            timer: 2000,
        });
    }
}







async function cancelOrder(orderId) {
    if (confirm('Are you sure you want to cancel this order?')) {
        const response = await fetch(`/admin/orders/${orderId}/cancel`, {
            method: 'PATCH'
        });

        if (response.ok) {
          Swal.fire({
                icon: 'success',
                title: 'Cancelled!',
                text: 'Order cancelled successfully.',
                timer: 2000, 
                willClose: () => {
                    location.reload(); 
                }
            });
        } else {
          Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error cancelling order.',
                timer: 2000, 
                willClose: () => {
                    location.reload(); 
                }
            });
        }
    }
}

</script>



